// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "vitest";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var MyException = /* @__PURE__ */Caml_exceptions.create("VitestBdd_test.MyException");

Vitest.describe("VitestBdd", (function () {
        Vitest.it("should match snapshot", (function () {
                Vitest.expect({
                        name: "John",
                        age: 31
                      }).toMatchSnapshot(undefined);
              }));
        Vitest.it("should match object", (function () {
                Vitest.expect({
                        name: "John",
                        age: 31
                      }).toMatchObject({
                      name: "John",
                      age: 31
                    });
              }));
        Vitest.it("should support .not modifier", (function () {
                Vitest.expect(1).not.toBe(2);
              }));
        Vitest.it("should support .soft modifier", (function () {
                Vitest.expect.soft(1).toBe(1);
              }));
        Vitest.it("should support .poll modifier", (async function () {
                return Vitest.expect.poll((function () {
                                return 42;
                              }), {
                              interval: 10,
                              timeout: 50
                            }).toBe(42);
              }));
        Vitest.it("should support toBe", (function () {
                Vitest.expect(1).toBe(1);
              }));
        Vitest.it("should compile with multiple assertions", (function () {
                Vitest.expect.assertions(2);
                Vitest.expect(1).toBe(1);
                Vitest.expect(2).toBe(2);
              }));
        Vitest.it("should support toEqual", (function () {
                Vitest.expect([
                        1,
                        2,
                        3
                      ]).toEqual([
                      1,
                      2,
                      3
                    ]);
              }));
        Vitest.it("should support toStrictEqual", (function () {
                Vitest.expect({
                        a: 1,
                        b: 2
                      }).toStrictEqual({
                      a: 1,
                      b: 2
                    });
              }));
        Vitest.it("should support toBeTruthy", (function () {
                Vitest.expect(true).toBeTruthy();
              }));
        Vitest.it("should support toBeFalsy", (function () {
                Vitest.expect(false).toBeFalsy();
              }));
        Vitest.it("should support toBeDefined", (function () {
                Vitest.expect(1).toBeDefined();
              }));
        Vitest.it("should support toBeUndefined", (function () {
                Vitest.expect(undefined).toBeUndefined();
              }));
        Vitest.it("should support toBeNull", (function () {
                Vitest.expect(null).toBeNull();
              }));
        Vitest.it("should support toBeNaN", (function () {
                Vitest.expect(NaN).toBeNaN();
              }));
        Vitest.it("should support toBeTypeOf", (function () {
                Vitest.expect("hello").toBeTypeOf("string");
              }));
        Vitest.it("should support toBeCloseTo", (function () {
                Vitest.expect(3.14159).toBeCloseTo(3.14, 2);
              }));
        Vitest.it("should support toBeGreaterThan", (function () {
                Vitest.expect(5.0).toBeGreaterThan(4.0);
              }));
        Vitest.it("should support toBeGreaterThanOrEqual", (function () {
                Vitest.expect(5.0).toBeGreaterThanOrEqual(5.0);
              }));
        Vitest.it("should support toBeLessThan", (function () {
                Vitest.expect(3.0).toBeLessThan(4.0);
              }));
        Vitest.it("should support toBeLessThanOrEqual", (function () {
                Vitest.expect(4.0).toBeLessThanOrEqual(4.0);
              }));
        Vitest.it("should support toMatch", (function () {
                Vitest.expect("hello world").toMatch(/world/);
              }));
        Vitest.it("should support toMatchInlineSnapshot", (function () {
                Vitest.expect({
                        foo: "bar"
                      }).toMatchInlineSnapshot(undefined, "{\n  \"foo\": \"bar\",\n}");
              }));
        Vitest.it("should support toMatchSnapshot", (function () {
                Vitest.expect({
                        name: "John",
                        age: 30
                      }).toMatchSnapshot(undefined);
              }));
        Vitest.it("should support toContain", (function () {
                Vitest.expect([
                        1,
                        2,
                        3
                      ]).toContain(2);
              }));
        Vitest.it("should support toContainEqual", (function () {
                Vitest.expect([
                        {
                          a: 1
                        },
                        {
                          a: 2
                        }
                      ]).toContainEqual({
                      a: 2
                    });
              }));
        Vitest.it("should support toHaveLength", (function () {
                Vitest.expect([
                        1,
                        2,
                        3
                      ]).toHaveLength(3);
              }));
        Vitest.it("should support toHaveProperty", (function () {
                Vitest.expect({
                        foo: 42,
                        bar: 7
                      }).toHaveProperty("foo", 42);
              }));
        Vitest.it("should support toBeOneOf", (function () {
                Vitest.expect(2).toBeOneOf([
                      1,
                      2,
                      3
                    ]);
              }));
        Vitest.it("should support toThrow", (function () {
                var f = function () {
                  throw {
                        RE_EXN_ID: "Failure",
                        _1: "fail",
                        Error: new Error()
                      };
                };
                Vitest.expect(f).toThrow(undefined);
              }));
        Vitest.it("should support toThrowError", (function () {
                var f = function () {
                  throw {
                        RE_EXN_ID: "Failure",
                        _1: "fail",
                        Error: new Error()
                      };
                };
                Vitest.expect(f).toThrowError(undefined, "fail");
              }));
        Vitest.it("should support resolves", (async function () {
                var promise = Promise.resolve(42);
                return Vitest.expect(promise).resolves.toBe(42);
              }));
        Vitest.it("should force await on resolves", (async function () {
                var promise = Promise.resolve(42);
                await Vitest.expect(promise).resolves.toBe(42);
                return Vitest.expect(1).toBe(1);
              }));
        Vitest.it("should support rejects", (async function () {
                var promise = Promise.reject({
                      RE_EXN_ID: MyException,
                      _1: "fail"
                    });
                return await Vitest.expect(promise).rejects.toMatchObject({
                            RE_EXN_ID: MyException,
                            _1: "fail"
                          });
              }));
        Vitest.it("should support toSatisfy", (function () {
                Vitest.expect(10).toSatisfy(function (x) {
                      return x > 5;
                    });
              }));
        Vitest.it("should support toMatchObject", (function () {
                Vitest.expect({
                        a: 1,
                        b: 2
                      }).toMatchObject({
                      a: 1
                    });
              }));
        Vitest.it("should support toMatchFileSnapshot", (async function () {
                return await Vitest.expect("blah blah").toMatchFileSnapshot("blah-blah.txt", undefined);
              }));
        Vitest.it("should support toThrowErrorMatchingSnapshot", (function () {
                var f = function () {
                  throw {
                        RE_EXN_ID: "Failure",
                        _1: "fail",
                        Error: new Error()
                      };
                };
                Vitest.expect(f).toThrowErrorMatchingSnapshot(undefined);
              }));
        Vitest.it("should support toThrowErrorMatchingInlineSnapshot", (function () {
                var f = function () {
                  throw {
                        RE_EXN_ID: "Failure",
                        _1: "fail",
                        Error: new Error()
                      };
                };
                Vitest.expect(f).toThrowErrorMatchingInlineSnapshot(undefined, "{ \n      \"Failure\": \"fail\"\n    }");
              }));
        Vitest.it("should support .not modifier", (function () {
                Vitest.expect.assertions(1);
                Vitest.expect(1).toBe(1);
              }));
        Vitest.it("compare float in object properties", (function () {
                Vitest.expect({
                        title: "0.1 + 0.2",
                        sum: 0.1 + 0.20002
                      }).toEqual({
                      title: "0.1 + 0.2",
                      sum: Vitest.expect.closeTo(0.3, 2)
                    });
              }));
        Vitest.it("should support expected.anything in toEqual", (function () {
                Vitest.expect({
                        a: 1,
                        b: 2
                      }).toEqual({
                      a: Vitest.expect.anything(),
                      b: Vitest.expect.anything()
                    });
              }));
        Vitest.it("should support expected.any in toEqual", (function () {
                Vitest.expect({
                        name: "John",
                        age: 30
                      }).toEqual({
                      name: Vitest.expect.any(String),
                      age: Vitest.expect.any(Number)
                    });
              }));
        Vitest.it("should support expected.arrayContaining in toEqual", (function () {
                Vitest.expect({
                        list: [
                          1,
                          2,
                          3
                        ]
                      }).toEqual({
                      list: Vitest.expect.arrayContaining([2])
                    });
              }));
        Vitest.it("should support expected.objectContaining in toEqual", (function () {
                Vitest.expect({
                        a: 1,
                        b: 2
                      }).toEqual(Vitest.expect.objectContaining({
                          a: 1
                        }));
              }));
        Vitest.it("should support expected.stringContaining in toEqual", (function () {
                Vitest.expect({
                        name: "hello world",
                        age: 30
                      }).toEqual({
                      name: Vitest.expect.stringContaining("world"),
                      age: Vitest.expect.any(Number)
                    });
              }));
        Vitest.it("should support expected.stringMatching in toEqual", (function () {
                Vitest.expect({
                        name: "abc123",
                        age: 30
                      }).toEqual({
                      name: Vitest.expect.stringMatching(/\d+/),
                      age: Vitest.expect.any(Number)
                    });
              }));
        Vitest.it("should support addSnapshotSerializer", (function () {
                var called = {
                  contents: false
                };
                var serializer_test = function (_value) {
                  called.contents = true;
                  return true;
                };
                var serializer_print = function (_value) {
                  return "serialized";
                };
                var serializer = {
                  test: serializer_test,
                  print: serializer_print
                };
                Vitest.expect.addSnapshotSerializer(serializer);
                Vitest.expect(called.contents).toBe(false);
              }));
        Vitest.it("should support extend for custom matchers", (function () {
                var matcher = {
                  toBeFoo: (function (value) {
                      if (value === "foo") {
                        return {
                                pass: true,
                                message: (function () {
                                    return "ok";
                                  })
                              };
                      } else {
                        return {
                                pass: false,
                                message: (function () {
                                    return "not foo";
                                  })
                              };
                      }
                    })
                };
                Vitest.expect.extend(matcher);
                Vitest.expect(true).toBeTruthy();
              }));
        Vitest.it("should support addEqualityTesters", (function () {
                var tester = Caml_obj.equal;
                Vitest.expect.addEqualityTesters([tester]);
                Vitest.expect(true).toBeTruthy();
              }));
      }));

export {
  MyException ,
}
/*  Not a pure module */
